<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
    	org.talend.core.model.process.ElementParameterParser		
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.Map
	"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
log = new LogUtil(node);

List<Map<String, String>> relationshipMappings = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__UPSERT_RELATION__");

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null) && (metadatas.size()>0)){
    IMetadataTable metadata = metadatas.get(0);
    if (metadata != null){
	    String filename = ElementParameterParser.getValue(node,"__FILENAME__");
	    boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
	    boolean hasDynamic = metadata.isDynamicSchema();
		%>
		int nb_line_<%=cid%> = 0;
		java.io.File file_<%=cid%> = new java.io.File(<%=filename%>);
		<%log.info(log.str("Creating directory for file '"), "file_" + cid + ".getCanonicalPath()", log.str("', if the directory not exist."));%>
		file_<%=cid%>.getParentFile().mkdirs();
		<%log.info(log.str("The directory of the file '"), "file_" + cid + ".getCanonicalPath()", log.str("' has been prepared."));%>
		com.talend.csv.CSVWriter csvWriter_<%=cid%> = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
		        new java.io.FileOutputStream(file_<%=cid%>, <%=isAppend%>), "UTF-8")));
		resourceMap.put("csvWriter_<%=cid%>", csvWriter_<%=cid%>); 
		<%
		if(hasDynamic){
		%>
			boolean isGenDynamicHeader_<%=cid%> = true;
			int columnCount_<%=cid%> = <%=metadata.getListColumns().size()%>;
		<%
		}
		List<? extends IConnection> conns = node.getIncomingConnections();
    	if(!hasDynamic && conns != null){
    		if (conns.size() > 0){
    		    IConnection conn = conns.get(0);
        		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
        			List<IMetadataColumn> columns = metadata.getListColumns();
            		int sizeColumns = columns.size();
        			%>  	
					if(file_<%=cid%>.length() == 0){
                		String[] header_<%=cid%> = new String[<%=sizeColumns%>];
	                	<%
	        			for (int i = 0; i < sizeColumns; i++){
	            			IMetadataColumn column = columns.get(i);
	            			
	            			boolean reference = false;
	            			String lookupFieldName = null;
	            			String externalIdFromLookupField = null;
	            			boolean polymorphic = false;
	            			String lookupFieldModuleName = null;
	            			
	            			for(Map<String,String> row : relationshipMappings){
	            				String columnName = row.get("COLUMN_NAME");
	            				if(columnName.equals(column.getLabel())){
	            					lookupFieldName = row.get("LOOKUP_FIELD_NAME");
									externalIdFromLookupField = row.get("LOOKUP_FIELD_EXTERNAL_ID_NAME");
									polymorphic = "true".equals(row.get("POLYMORPHIC"));
									lookupFieldModuleName = row.get("LOOKUP_FIELD_MODULE_NAME");
	            					reference = true;
									break;
								}
							}
								
							if(!reference){
							%>
								header_<%=cid%>[<%=i%>] = "<%=column.getLabel()%>";
							<%
							} else {
							%>
								header_<%=cid%>[<%=i%>] = <%if(polymorphic){%> <%=lookupFieldModuleName%> + ":" + <%}%><%=lookupFieldName%> + "." + <%=externalIdFromLookupField%>;
							<%
							}
						}
						%>
						<%log.trace(log.str("Written header: "), "java.util.Arrays.asList(header_" + cid + ")");%>
						csvWriter_<%=cid%>.writeNext(header_<%=cid%>);	
					}	
				<%
				}
			}
		}
	}
}
%>
        