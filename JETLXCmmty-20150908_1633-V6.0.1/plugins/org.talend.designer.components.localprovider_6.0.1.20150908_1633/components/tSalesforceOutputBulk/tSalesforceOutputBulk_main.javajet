<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
    	org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
log = new LogUtil(node);
String cid = node.getUniqueName();
List<IMetadataTable> metadatas = node.getMetadataList();

boolean ignoreNullValue = ("true").equals(ElementParameterParser.getValue(node, "__IGNORE_NULL__"));

if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	boolean hasDynamic = metadata.isDynamicSchema();
    	String dynamicColName = hasDynamic?metadata.getDynamicColumn().getLabel():"";
    	if(conns!=null){
    		if (conns.size()>0){
    		    IConnection conn =conns.get(0);
        		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        			List<IMetadataColumn> columns = metadata.getListColumns();
            		int sizeColumns = columns.size();
            		if(hasDynamic){
        			%> 
	        			if(isGenDynamicHeader_<%=cid%>){
		        			if(file_<%=cid%>.length() == 0 && <%=conn.getName() %>.<%=dynamicColName %> != null){
		        				int dynamicColCount_<%=cid%> = 1;
		        				if(<%=conn.getName() %>.<%=dynamicColName %>!=null){
		        					dynamicColCount_<%=cid%> = <%=conn.getName() %>.<%=dynamicColName %>.getColumnCount();
		        					columnCount_<%=cid%> = dynamicColCount_<%=cid%> + <%=sizeColumns%>-1;
		        				}
		                		String[] header_<%=cid%> = new String[<%=sizeColumns%>+dynamicColCount_<%=cid%>-1];
			                	<%
			                	String columnIndex = "0";
			                	boolean isAfterDynamic = false;
			        			for (int i = 0; i < sizeColumns; i++){
			            			IMetadataColumn column = columns.get(i);
			            			if(isAfterDynamic){
			            				columnIndex = conn.getName()+"."+dynamicColName +".getColumnCount()+"+(i-1);
			            			}else{
			            				columnIndex = ""+i;
			            			}
									if(column.getTalendType().equals("id_Dynamic")){
									%>
										if(<%=conn.getName() %>.<%=dynamicColName %>!=null){
											for(int i_<%=cid%>=0;i_<%=cid%><<%=conn.getName() %>.<%=dynamicColName %>.getColumnCount();i_<%=cid%>++){
												routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = <%=conn.getName() %>.<%=dynamicColName %>.getColumnMetadata(i_<%=cid%>);
												String fieldName_<%=cid%> = dynamicMetadata_<%=cid%>.getName();
												if(dynamicMetadata_<%=cid%>.getRefFieldName()!=null && dynamicMetadata_<%=cid%>.getRefModuleName()!=null){
													header_<%=cid%>[i_<%=cid%>+<%=columnIndex%>] = dynamicMetadata_<%=cid%>.getRefModuleName() + ":" + dynamicMetadata_<%=cid%>.getRefFieldName()+ "." + fieldName_<%=cid%>;
												}else{
													header_<%=cid%>[i_<%=cid%>+<%=columnIndex%>] = fieldName_<%=cid%>;
												}
											}
										}
									<%
										isAfterDynamic = true;
									}else{
									%>
										header_<%=cid%>[<%=columnIndex%>] = "<%=column.getLabel() %>";
									<%
									}
								}
								%>
								<%log.trace(log.str("Written header: "), "java.util.Arrays.asList(header_" + cid + ")");%>
								csvWriter_<%=cid%>.writeNext(header_<%=cid%>);	
							}	
							isGenDynamicHeader_<%=cid%> = false;
						}
					<%
					}
					if(!hasDynamic){
					%> 
                		String[] row_<%=cid%> = new String[]{<%for(int j=0;j<sizeColumns;j++){ if(ignoreNullValue){%> "",<%}else{%>"#N/A",<%}}%>};		//empty value must be NULL('#N/A' in bulk file)
                	<%
                	}else{
                	%>
                		String[] row_<%=cid%> = new String[columnCount_<%=cid%>];
                		for(int j_<%=cid%>=0;j_<%=cid%><columnCount_<%=cid%>;j_<%=cid%>++){
							row_<%=cid%>[j_<%=cid%>] = <%if(ignoreNullValue){%> ""<%}else{%>"#N/A"<%}%>;
						}
                	<%
                	}
                	String columnIndex = "i";
			        boolean isAfterDynamic = false;
        			for (int i = 0; i < sizeColumns; i++) {
            			IMetadataColumn column = columns.get(i);
            			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
            			String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
            			if(hasDynamic && isAfterDynamic){
            				columnIndex = conn.getName()+"."+dynamicColName +".getColumnCount()+"+(i-1);
            			}else{
            				columnIndex = ""+i;
            			}
            			if(column.getTalendType().equals("id_Dynamic")){
            			%>
            				if(<%=conn.getName() %>.<%=dynamicColName %>!=null){
								for(int i_<%=cid%>=0;i_<%=cid%>< <%=conn.getName() %>.<%=dynamicColName %>.getColumnCount();i_<%=cid%>++){
									routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = <%=conn.getName() %>.<%=dynamicColName %>.getColumnMetadata(i_<%=cid%>);
									String talendType_<%=cid%> = dynamicMetadata_<%=cid%>.getType();
									String fieldName_<%=cid%> = dynamicMetadata_<%=cid%>.getName();
									Object fieldValue_<%=cid%> = <%=conn.getName() %>.<%=dynamicColName %>.getColumnValue(fieldName_<%=cid%>);
									if(fieldValue_<%=cid%>!=null){
										if("id_Date".equals(talendType_<%=cid%>)){
											row_<%=cid%>[i_<%=cid%>+<%=columnIndex%>] = FormatterUtils.format_Date((java.util.Date)(fieldValue_<%=cid%>), dynamicMetadata_<%=cid%>.getFormat());
										}else{
											row_<%=cid%>[i_<%=cid%>+<%=columnIndex%>] = String.valueOf(fieldValue_<%=cid%>);
										}
									}
								}
							}
            				<%
            				isAfterDynamic = true;
            			}else if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
        			    %>
        			    	row_<%=cid%>[<%=columnIndex%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
        			    <%
            			}else {
        			    %>
            			    if(<%=conn.getName() %>.<%=column.getLabel() %> != null){
            			        <%					
            			        if(javaType == JavaTypesManager.DATE && pattern != null){
            			            %>
            			            row_<%=cid%>[<%=columnIndex%>] = FormatterUtils.format_Date(<%=conn.getName() %>.<%=column.getLabel() %>, <%= pattern %>);
            			            <%
            			        }else{
            			            %>
            			            row_<%=cid%>[<%=columnIndex%>] = String.valueOf(<%=conn.getName() %>.<%=column.getLabel() %>);
            			            <%
            			        }
            			        %>                			    
            			    }
            		 	<% 
            			}
        			} 
        			%>
    			    csvWriter_<%=cid%>.writeNext(row_<%=cid%>);	
    			    
    				nb_line_<%=cid %>++;
    				<%log.debug(log.str("Writing the record "), log.var("nb_line"), log.str("."));%>
    			<%   		
        		}
    		}
    	}
    }
}
%>
